<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Doubles Match Scheduler</title>
  <style>
    body {
      background-color: #1e1e1e;
      color: white;
      font-family: 'Segoe UI', sans-serif;
      padding: 30px;
      text-align: center;
    }
    h1, h2 {
      color: #ffffff;
    }
    .section {
      margin-top: 30px;
    }
    .players {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 30px;
      margin-bottom: 20px;
    }
    .column {
      display: flex;
      flex-direction: column;
    }
    label {
      margin-bottom: 5px;
    }
    button {
      margin: 5px 5px 5px 0;
      padding: 8px 12px;
      font-size: 14px;
      border: none;
      background-color: #007acc;
      color: white;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover {
      background-color: #005fa3;
    }
    .match-box {
      background-color: #2a2a2a;
      padding: 10px;
      margin: 10px auto;
      border-left: 5px solid #00c2a8;
      width: 300px;
      text-align: left;
    }
    .status-message {
      color: #ffdd57;
      font-weight: bold;
      margin-top: 10px;
    }
  </style>
</head>
<body>

<h1>Doubles Match Scheduler</h1>

<div class="section">
  <label><strong>✅ Select Available Players:</strong></label><br>
  <button onclick="selectAll()">Select All</button>
  <button onclick="unselectAll()">Unselect All</button>
  <button onclick="resetMatches()">Reset All Matches</button>
  <button onclick="clearConfirmedMatches()">Clear Confirmed Matches</button>
</div>

<div class="players" id="playerList"></div>

<button onclick="generateMatch()">Generate Match</button>
<div class="status-message" id="statusMessage"></div>

<div class="section">
  <h2>🟠 Potential Matches</h2>
  <div id="potentialMatches"></div>
</div>

<div class="section">
  <h2>✅ Confirmed Matches</h2>
  <div id="confirmedMatches"></div>
</div>

<script>
  const allPlayers = [
    "Agin", "Bayu", "Didit", "Eroy", "Fahmi", "Faishal", "Idan", "Ikhsan", "Irfan",
    "Irsyad", "Jalu", "Jericho", "Karim", "Leo", "Masjidi", "Prasoon", "Priyanto", "Rifki",
    "Rizki", "Rizky", "Seto", "Syamil", "Toto", "Umar", "Yusuf", "Zaki"
  ];

  const csvData = `25-Apr-2025,Irfan/Prasoon,Yusuf/Toto,30-22
25-Apr-2025,Jalu/Jericho,Faishal/Eroy,30-21
25-Apr-2025,Irfan/Jericho,Eroy/Jalu,30-7
02-May-2025,Yusuf/Rizki,Jalu/Karim,31-29
02-May-2025,Idan/Syamil,Didit/Zaki,35-34
02-May-2025,Yusuf/Zaki,Prasoon/Karim,32-30
02-May-2025,Didit/Syamil,Bayu/Masjidi,30-22
02-May-2025,Idan/Fahmi,Toto/Irsyad,30-26
02-May-2025,Zaki/Faishal,Syamil/Prasoon,22-30
02-May-2025,Irsyad/Masjidi,Didit/Fahmi,20-30
02-May-2025,Toto/Fahmi,Yusuf/Faishal,22-30
09-May-2025,Seto/Syamil,Faishal/Toto,30-22
09-May-2025,Yusuf/Bayu,Didit/Idan,30-18
09-May-2025,Fahmi/Faishal,Seto/Toto,30-22
09-May-2025,Jalu/Yusuf,Fahmi/Rizki,19-30
16-May-2025,Didit/Bayu,Zaki/Idan,30-27
16-May-2025,Seto/Bayu,Idan/Karim,30-20
16-May-2025,Toto/Rizky,Prasoon/Seto,14-30
16-May-2025,Syamil/Karim,Jalu/Rizki,30-13
16-May-2025,Yusuf/Didit,Seto/Toto,30-32
16-May-2025,Priyanto/Zaki,Fahmi/Faisal,27-30
16-May-2025,Idan/Rizky,Bayu/Fahmi,19-30
23-May-2025,Idan/Bayu,Prasoon/Zaki,25-31
23-May-2025,Didit/Rizky,Seto/Yusuf,16-30
23-May-2025,Rizki/Zaki,Idan/Rizky,31-29
23-May-2025,Jalu/Masjidi,Bayu/Rizki,33-31
23-May-2025,Bayu/Prasoon,Syamil/Zaki,16-30`;

  const partnerHistory = {};
  csvData.trim().split("\n").forEach(row => {
    const [, team1, team2] = row.split(",");
    [team1, team2].forEach(team => {
      const [p1, p2] = team.trim().split("/").map(p => p.trim());
      if (!partnerHistory[p1]) partnerHistory[p1] = new Set();
      if (!partnerHistory[p2]) partnerHistory[p2] = new Set();
      partnerHistory[p1].add(p2);
      partnerHistory[p2].add(p1);
    });
  });

  const playerList = document.getElementById("playerList");
  const potentialMatchesDiv = document.getElementById("potentialMatches");
  const confirmedMatchesDiv = document.getElementById("confirmedMatches");
  const statusMessage = document.getElementById("statusMessage");

  const potentialMatches = JSON.parse(localStorage.getItem("potentialMatches") || "[]");
  const confirmedMatches = JSON.parse(localStorage.getItem("confirmedMatches") || "[]");

  function initPlayerList() {
    playerList.innerHTML = "";
    const cols = 3;
    const chunkSize = Math.ceil(allPlayers.length / cols);
    for (let c = 0; c < cols; c++) {
      const colDiv = document.createElement("div");
      colDiv.className = "column";
      for (let i = c * chunkSize; i < (c + 1) * chunkSize && i < allPlayers.length; i++) {
        const label = document.createElement("label");
        label.innerHTML = `<input type="checkbox" value="${allPlayers[i]}" checked> ${allPlayers[i]}`;
        colDiv.appendChild(label);
      }
      playerList.appendChild(colDiv);
    }
  }

  function selectAll() {
    document.querySelectorAll("#playerList input[type=checkbox]").forEach(cb => cb.checked = true);
  }

  function unselectAll() {
    document.querySelectorAll("#playerList input[type=checkbox]").forEach(cb => cb.checked = false);
  }

  function resetMatches() {
    localStorage.removeItem("potentialMatches");
    localStorage.removeItem("confirmedMatches");
    location.reload();
  }

  function clearConfirmedMatches() {
    localStorage.removeItem("confirmedMatches");
    location.reload();
  }

  function shuffle(arr) {
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [arr[i], arr[j]] = [arr[j], arr[i]];
    }
  }

  function arraysEqual(a, b) {
    return a.length === b.length && a.every((val, i) => val === b[i]);
  }

  function matchExistsInList(list, teamA, teamB) {
    const ta = [...teamA].sort();
    const tb = [...teamB].sort();
    return list.some(m => {
      const mA = [...m.teamA].sort();
      const mB = [...m.teamB].sort();
      return (arraysEqual(mA, ta) && arraysEqual(mB, tb)) ||
             (arraysEqual(mA, tb) && arraysEqual(mB, ta));
    });
  }

  function generateMatch() {
    statusMessage.textContent = "";
    const selected = [...document.querySelectorAll("#playerList input[type=checkbox]:checked")].map(cb => cb.value);
    if (selected.length < 4) {
      statusMessage.textContent = "⚠️ Select at least 4 players.";
      return;
    }

    const pool = [...selected];
    shuffle(pool);

    function findValidPair(players) {
      for (let i = 0; i < players.length; i++) {
        for (let j = i + 1; j < players.length; j++) {
          const a = players[i], b = players[j];
          if (!partnerHistory[a]?.has(b)) {
            return [a, b];
          }
        }
      }
      return null;
    }

    const pairA = findValidPair(pool);
    if (!pairA) {
      statusMessage.textContent = "⚠️ No valid first pair found.";
      return;
    }
    pool.splice(pool.indexOf(pairA[0]), 1);
    pool.splice(pool.indexOf(pairA[1]), 1);

    const pairB = findValidPair(pool);
    if (!pairB) {
      statusMessage.textContent = "⚠️ No valid second pair found.";
      return;
    }

    if (matchExistsInList(potentialMatches, pairA, pairB) || matchExistsInList(confirmedMatches, pairA, pairB)) {
      statusMessage.textContent = "⚠️ Match already exists in potential or confirmed list.";
      return;
    }

    const match = { teamA: pairA, teamB: pairB };
    potentialMatches.push(match);
    localStorage.setItem("potentialMatches", JSON.stringify(potentialMatches));
    renderMatches();
  }

  function confirmMatch(index) {
    const match = potentialMatches.splice(index, 1)[0];
    confirmedMatches.push(match);
    localStorage.setItem("potentialMatches", JSON.stringify(potentialMatches));
    localStorage.setItem("confirmedMatches", JSON.stringify(confirmedMatches));
    renderMatches();
  }

  function renderMatches() {
    potentialMatchesDiv.innerHTML = "";
    confirmedMatchesDiv.innerHTML = "";

    potentialMatches.forEach((m, i) => {
      const div = document.createElement("div");
      div.className = "match-box";
      div.innerHTML = `
        <strong>Match ${i + 1}:</strong> ${m.teamA.join("/")} vs ${m.teamB.join("/")}<br>
        <button onclick="confirmMatch(${i})">Confirm Match</button>`;
      potentialMatchesDiv.appendChild(div);
    });

    confirmedMatches.forEach((m, i) => {
      const div = document.createElement("div");
      div.className = "match-box";
      div.innerHTML = `<strong>Match ${i + 1}:</strong> ${m.teamA.join("/")} vs ${m.teamB.join("/")}`;
      confirmedMatchesDiv.appendChild(div);
    });
  }

  initPlayerList();
  renderMatches();
</script>

</body>
</html>
